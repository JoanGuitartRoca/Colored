{"version":3,"sources":["components/topbar/Topbar.jsx","components/colorpicker/ColorPicker.jsx","components/palette/ColorCode.jsx","components/palette/Palette.jsx","data.js","helpers/getColors.js","components/colorModes/ColorModes.jsx","hooks/useFetchColorsMode.js","App.jsx","index.js"],"names":["Topbar","className","Container","styled","span","ColorPicker","colorInput","onChange","rest","type","value","ColorCode","x","y","z","mode","Palette","colors","useState","successCopy","setSuccess","copyText","setCopyText","map","c","index","onClick","hex","setTimeout","id","name","rgb","hsl","text","CopyToClipElement","myRef","useRef","data","setData","useEffect","current","select","document","execCommand","ref","modes","label","types","getColors","color","a","replace","url","fetch","resp","json","col","r","g","b","h","s","l","ColorModes","setBg","Math","random","toString","padStart","setColorInput","setMode","setType","setColors","then","cols","useFetchColorsMode","body","onkeyup","e","keyCode","target","length","options","m","placeholder","t","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ac478f6e.chunk.js","sourcesContent":["import React from 'react'\r\nimport './topbar.scss'\r\n\r\nexport default function Topbar() {\r\n    return (\r\n        <div className=\"topbar\">\r\n            <div className=\"logo\">\r\n                <span>COLORED</span>\r\n            </div>\r\n            <div className=\"menu\">\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport './colorpicker.scss'\r\n\r\nconst Container = styled.span`\r\ndisplay: inline-flex;\r\nalign-items: center;\r\nwidth: 150px;\r\nmax-width: 150px;\r\npadding: 4px 12px;\r\nborder-radius: 4px;\r\n\r\ninput[type=\"color\"] {\r\n    margin-right: 8px;\r\n    -webkit-appearance: none;\r\n    border: none;\r\n    width: auto;\r\n    height: auto;\r\n    cursor: pointer;\r\n    background: none;\r\n    &::-webkit-color-swatch-wrapper {\r\n    padding: 0;\r\n    width: 14px;\r\n    height: 14px;\r\n    }\r\n    &::-webkit-color-swatch {\r\n    border: 1px solid #bfc9d9;\r\n    border-radius: 4px;\r\n    padding: 0;\r\n    }\r\n}\r\n\r\ninput[type=\"text\"] {\r\n    border: none;\r\n    border-radius: 4px;\r\n    text-align: center;\r\n    width: 100%;\r\n    height: 30px;\r\n    font-size: 14px;\r\n    font-family:  'Quicksand', sans-serif;\r\n}\r\n`;\r\n\r\nexport default function ColorPicker({colorInput, onChange, ...rest}) {\r\n\r\n\r\n    return (\r\n        <div className=\"input-color\">\r\n            <Container>\r\n                <input type=\"color\" value={colorInput} onChange={onChange} {... rest} />\r\n                <input type=\"text\" value={colorInput} onChange={onChange} {... rest}/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './palette.scss'\r\n\r\nexport default function ColorCode({ x, y, z, mode }) {\r\n\r\n    return (\r\n        <div className=\"color-code\">\r\n            <div className=\"code\">\r\n                <span> { x } </span>\r\n                <span> { mode === 'rgb' ? 'R' : 'H' } </span>\r\n            </div>\r\n            <div className=\"code\">\r\n                <span> { y } </span>\r\n                <span> { mode === 'rgb' ? 'G' : 'S' } </span>\r\n            </div>\r\n            <div className=\"code\">\r\n                <span> { z } </span>\r\n                <span> { mode === 'rgb' ? 'B' : 'L' } </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport \"./palette.scss\"\r\nimport ColorCode from './ColorCode'\r\n\r\nexport default function Palette({ colors, type }) {\r\n    \r\n    const [successCopy, setSuccess] = useState(false);\r\n    const [copyText, setCopyText] = useState(\"\");\r\n    \r\n    const handleCopyText = ( hex ) => {\r\n        setCopyText(hex);\r\n        setSuccess(true);\r\n\r\n        setTimeout(() => {\r\n\r\n            setSuccess(false);\r\n            \r\n        }, 400);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"palette\">\r\n            \r\n            {\r\n                colors.map((c, index) =>(\r\n                    \r\n                    <div className=\"palette-box\" onClick={() => handleCopyText(c.hex)} key={ index }>\r\n\r\n                        <div className=\"color\" id={`color_${index}`}>\r\n                            <style>{\r\n                                    `#color_${index}{\r\n                                        background-color: ${c.hex};\r\n                                        transition: all .3s ease-in-out; \r\n                                    `}\r\n                            </style>\r\n                            \r\n                            <div className=\"copy-text\">\r\n                                {!successCopy ? \"Copy hex\" : \"Copied!\"}\r\n                            </div>\r\n                            \r\n                            <span className=\"name\">{c.name}</span>\r\n                        </div>\r\n\r\n                        <div className=\"values\">\r\n                            { type === \"HEX\" && <div className=\"color-code\"><span >{c.hex}</span></div> }\r\n                            { type === \"RGB\" && <ColorCode x={c.rgb[0]} y={c.rgb[1]} z={c.rgb[2]} mode=\"rgb\"/>}\r\n                            { type === \"HSL\" && <ColorCode x={c.hsl[0]} y={c.hsl[1]} z={c.hsl[2]} mode=\"hsl\"/>}\r\n                        </div> \r\n                    </div>\r\n                )) \r\n            }\r\n            <CopyToClipElement text={copyText} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst CopyToClipElement = ({ text }) => {\r\n    const myRef = useRef(null);\r\n    const [data, setData] = useState(text);\r\n    useEffect(() => setData(text), [text]);\r\n  \r\n    useEffect(() => {\r\n      if (myRef.current && data) {\r\n        myRef.current.select();\r\n        document.execCommand(\"copy\");\r\n        setData(null);\r\n      }\r\n    }, [data, myRef.current]);\r\n  \r\n    return <>{data && <textarea ref={myRef}>{data}</textarea>}</>;\r\n  };","export const modes = [\r\n    {\r\n        value: 1,\r\n        label: 'monochrome'\r\n    },\r\n    {\r\n        value: 2,\r\n        label: 'monochrome-light'\r\n    },\r\n    {\r\n        value: 3,\r\n        label: 'monochrome-dark'\r\n    },\r\n    {\r\n        value: 4,\r\n        label: 'analogic'\r\n    },\r\n    {\r\n        value: 5,\r\n        label: 'analogic-complement'\r\n    },\r\n    {\r\n        value: 6,\r\n        label: 'complement'\r\n    },\r\n    {\r\n        value: 7,\r\n        label: 'triad'\r\n    },\r\n    {\r\n        value: 8,\r\n        label: 'quad'\r\n    }\r\n]\r\n\r\nexport const types = [\r\n    {\r\n        value: 1,\r\n        label: 'HEX'\r\n    },\r\n    {\r\n        value: 2,\r\n        label: 'RGB'\r\n    },\r\n    {\r\n        value: 3,\r\n        label: 'HSL'\r\n    }\r\n]\r\n\r\n","\r\nexport const getColors = async ( color, mode ) => {\r\n    const c = color.replace('#', '')\r\n    const url = `https://www.thecolorapi.com/scheme?hex=${c}&mode=${mode}`\r\n    const resp = await fetch(url)\r\n    const { colors } = await resp.json()\r\n\r\n    const col = colors.map( color => {\r\n        const {r, g, b} = color.rgb;\r\n        const {h, s, l} = color.hsl;\r\n        return {\r\n            name: color.name.value,\r\n            hex: color.hex.value,\r\n            rgb: [r, g, b],\r\n            hsl: [h, s, l]\r\n        }\r\n    })\r\n\r\n    return col\r\n    \r\n}","import React, { useState } from \"react\";\r\nimport ColorPicker from \"../colorpicker/ColorPicker\";\r\nimport Palette from \"../palette/Palette\";\r\nimport Select from 'react-select'\r\nimport {modes, types} from \"../../data\";\r\nimport './colorModes.scss'\r\nimport { useFetchColorsMode } from '../../hooks/useFetchColorsMode'\r\nimport { FaRandom } from 'react-icons/fa'\r\n\r\n\r\nexport default function ColorModes() {\r\n    \r\n    const setBg = () => '#'+(Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0');\r\n    const [colorInput, setColorInput] = useState(setBg())\r\n    const [mode, setMode] = useState('monochrome')\r\n    const [type, setType] = useState('HEX')\r\n    const { data:colors } = useFetchColorsMode(colorInput, mode)\r\n\r\n    const handleInput = (e) => {\r\n\r\n        if(e.target.value.length > 6) {\r\n            setColorInput(e.target.value)\r\n        } \r\n    }\r\n\r\n    const handleModel = (m) => setMode(m.label)\r\n    const handleType = (t) => setType(t.label)\r\n    const handleRandomBtn = () => setColorInput(setBg())\r\n    \r\n\r\n    document.body.onkeyup = function(e){\r\n        \r\n        if(e.keyCode === 32){\r\n            setColorInput(setBg())\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            \r\n            <div className=\"title\">\r\n                <span>Press space-bar to generate random color</span> \r\n            </div>\r\n            \r\n            <div className=\"base-color\">\r\n                <style>\r\n                    { `.base-color{background-color: ${colorInput};`}\r\n                </style>\r\n                <ColorPicker value={colorInput} onChange={handleInput} />   \r\n                <Select className=\"selectors\" options={modes} onChange={handleModel} placeholder=\"monochrome\" default-value={0}></Select>\r\n                <Select className=\"selectors\" options={types} onChange={handleType} placeholder=\"HEX\" default-value={0}></Select>\r\n\r\n            </div>\r\n            <Palette colorInput={colorInput} type={type} colors={colors}/>\r\n            <button className=\"mobile-btn\" onClick={ () => handleRandomBtn() }>\r\n                <style>{\r\n                        `.icon{\r\n                            color: ${colorInput};\r\n                            transition: all .3s ease-in-out; \r\n                        `}\r\n                </style>\r\n                <FaRandom className=\"icon\"/>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getColors } from '../helpers/getColors'\r\n\r\nexport const useFetchColorsMode = ( color, mode ) => {\r\n\r\n    const [colors, setColors] = useState({\r\n        data: []\r\n    })\r\n\r\n    useEffect( () => {\r\n        \r\n        getColors( color, mode )\r\n            .then( cols => {\r\n                setColors({\r\n                    data: cols\r\n                })\r\n                    \r\n            })\r\n    \r\n    }, [ color, mode ])\r\n\r\n    return colors;\r\n\r\n}","import React from \"react\";\r\nimport Topbar from \"./components/topbar/Topbar\";\r\nimport ColorModes from \"./components/colorModes/ColorModes\";\r\nimport \"./global.scss\"\r\n\r\nexport function App(){\r\n\r\n    return(\r\n        <>\r\n            <Topbar />\r\n            <div className=\"pages\">\r\n                <ColorModes />\r\n                {/* <RandomPalette /> */}\r\n            </div>\r\n\r\n        </>\r\n    )  \r\n}\r\n","import React from 'react';\r\nimport ReactDOM  from 'react-dom';\r\n\r\nimport {App} from './App.jsx';\r\n\r\nReactDOM.render( <App />, document.getElementById('root'));"],"sourceRoot":""}